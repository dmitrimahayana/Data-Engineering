##Start Kafka 1 Broker
#THIS IS IMPORTANT!!!! Disable ipv6 due to WSL issue 
sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1

##Start Kafka 1 Broker
kafka-storage.sh random-uuid
~/kafka_2.13-3.3.2/bin/kafka-storage.sh format -t UG62igbWR_2xGV0MRYXakg -c ~/kafka_2.13-3.3.2/config/kraft/server.properties
~/kafka_2.13-3.3.2/bin/kafka-server-start.sh ~/kafka_2.13-3.3.2/config/kraft/server.properties

##Start Kafka 2 Brokers
kafka-storage.sh format -t ZRwaTcxuTOmpQ1Ep3GaveA -c ~/kafka_cluster_setting/server_0.properties
kafka-storage.sh format -t ZRwaTcxuTOmpQ1Ep3GaveA -c ~/kafka_cluster_setting/server_1.properties
kafka-server-start.sh ~/kafka_cluster_setting/server_0.properties
kafka-server-start.sh ~/kafka_cluster_setting/server_1.properties

####################################################################################################################################

##Config Kafka Cluster
#Broker Node 1
node.id=1
controller.quorum.voters=1@192.168.207.8:9093,2@192.168.207.8:9193
listeners=PLAINTEXT://:9092,CONTROLLER://:9093
advertised.listeners=PLAINTEXT://localhost:9092
log.dirs=/tmp/kraft-combined-logs-log_0

#Broker Node 2
node.id=2
controller.quorum.voters=1@192.168.207.8:9093,2@192.168.207.8:9193
listeners=PLAINTEXT://:9192,CONTROLLER://:9193
advertised.listeners=PLAINTEXT://localhost:9192
log.dirs=/tmp/kraft-combined-logs-log_1


####################################################################################################################################


##Topic
kafka-topics.sh --bootstrap-server localhost:9092 --list
kafka-topics.sh --bootstrap-server localhost:9092 --topic streaming.goapi.idx.stock.json --create --partitions 6 --replication-factor 2
kafka-topics.sh --bootstrap-server localhost:9192 --describe --topic streaming.goapi.idx.stock.json
kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic streaming.goapi.idx.stock.json

##Start producer local
kafka-console-producer.sh --bootstrap-server localhost:9092 --topic wikimedia.recentchange
kafka-console-producer.sh --bootstrap-server localhost:9092 --producer-property partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner --topic wikimedia.recentchange

##Start consumer local
kafka-console-consumer.sh --bootstrap-server localhost:9192 --topic streaming.goapi.idx.stock.json --from-beginning
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group consumer-goapi-idx-stock
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group consumer-goapi-idx-stock --reset-offsets --to-earliest --topic streaming.goapi.idx.stock.json --execute
kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group consumer-goapi-idx-stock --reset-offsets --to-earliest --topic CURRENTIDXSTOCKPRICE --execute


##Start consumer conductor
kafka-console-consumer.sh --consumer.config playground.config --bootstrap-server cluster.playground.cdkt.io:9092 --topic demo_java --from-beginning
kafka-console-consumer.sh --consumer.config playground.config --bootstrap-server cluster.playground.cdkt.io:9092 --topic wikimedia.recentchange --from-beginning


####################################################################################################################################


##KSQLDB Start
sudo /usr/bin/ksql-server-start /etc/ksqldb/ksql-server.properties

##KSQLDB CLI Local
sudo /usr/bin/ksql http://0.0.0.0:8088

##KSQLDB Create Stream from Existing Topic 'streaming.goapi.idx.stock.json'
#Create Stream
CREATE OR REPLACE STREAM KSQLStreamIdxStockPrice (id VARCHAR, ticker VARCHAR, date VARCHAR, open DOUBLE, high DOUBLE, low DOUBLE, close DOUBLE, volume BIGINT)
WITH (kafka_topic='streaming.goapi.idx.stock.json', value_format='json', partitions=6);

#Must set offset to earliest for testing purposes
SET 'auto.offset.reset'='earliest';

#Query to check duplication of data
SELECT id, ticker, date, open, close, volume FROM KSQLStreamIdxStockPrice where ticker = 'BBCA' AND date = '2023-02-03';
SELECT ticker, COUNT(ticker) AS COUNTTICKER FROM KSQLStreamIdxStockPrice GROUP BY ticker EMIT CHANGES;
 
#Create Materialized View to remove duplication
CREATE OR REPLACE TABLE currentIdxStockPrice AS
	SELECT
		id,
		latest_by_offset(ticker) AS ticker,
		latest_by_offset(date) AS date,
		latest_by_offset(open) AS open, 
		latest_by_offset(high) AS high, 
		latest_by_offset(low) AS low, 
		latest_by_offset(close) AS close, 
		latest_by_offset(volume) AS volume
	FROM KSQLStreamIdxStockPrice GROUP BY id EMIT CHANGES;

#Query to check duplication of data
SELECT id, ticker, date, open, close, volume FROM currentIdxStockPrice where ticker = 'GOTO' AND date = '2023-02-03';

#Drop Table or Stream and Mention Delete Topic too if required to clean up existing topic
DROP TABLE currentIdxStockPrice DELETE TOPIC;
DROP STREAM KSQLStreamIdxStockPrice DELETE TOPIC;


####################################################################################################################################

